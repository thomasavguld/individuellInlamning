//EXPORT COMMON VARS

I andra filer där du vill använda years-variablen kan du längst upp bland dina importer skriva

import {years} from './common-vars.js'; 

Vill du använda flera variabler från filen common-vars.js i en annan fil kan det se ut så här:

import {years, optionsForLineChart} rom './common-vars.js'; 


//TRENDS

import addMdToPage from './libs/addMdToPage.js';
import addDropdown from './libs/addDropdown.js';
import dbQuery from "./libs/dbQuery.js";
import drawGoogleChart from './libs/drawGoogleChart.js';
import makeChartFriendly from './libs/makeChartFriendly.js';

let years = (await dbQuery(
  'SELECT DISTINCT year FROM dataWithMonths'
)).map(x => x.year);

let year1 = addDropdown('År 1', years, 1961);
let year2 = addDropdown('År 2', years, 2024)

// if year1 > year2 then switch the years
if (year1 > year2) {
  [year1, year2] = [year2, year1];
}

addMdToPage(`
  ## Hitta trender, från år ${year1} till år ${year2}
`);

let dataForChart = (await dbQuery(`
  SELECT year, AVG(temperatureC) AS avgTemperature 
  FROM dataWithMonths
  WHERE year >= '${year1}' AND year <= '${year2}'
  GROUP BY year 
`)).map(x => ({ ...x, year: +x.year })); // map to make year a number

drawGoogleChart({
  type: 'LineChart',
  data: makeChartFriendly(dataForChart, 'månad', `°C`),
  options: {
    height: 500,
    width: 1250,
    chartArea: { left: 50 },
    curveType: 'function',
    pointSize: 5,
    pointShape: 'circle',
    vAxis: { format: '# °C' },
    title: `Medeltemperatur per år i Malmö, trend mellan åren ${year1} och ${year2} (°C)`,
    trendlines: { 0: { color: 'green', pointSize: 0 } },
    hAxis: { format: "#" } // prevents years to be displayed as numbers
  }
});


// ONE YEAR

import addMdToPage from './libs/addMdToPage.js';
import addDropdown from './libs/addDropdown.js';
import dbQuery from "./libs/dbQuery.js";
import tableFromData from './libs/tableFromData.js';
import drawGoogleChart from './libs/drawGoogleChart.js';
import makeChartFriendly from './libs/makeChartFriendly.js';

let years = (await dbQuery(
  'SELECT DISTINCT year FROM dataWithMonths'
)).map(x => x.year);

let currentYear = addDropdown('År', years, 2024);

addMdToPage(`
  ## Medeltemperaturer i Malmö ${currentYear}
`);

let dataForChart = await dbQuery(
  `SELECT monthNameShort, temperatureC FROM dataWithMonths WHERE year = '${currentYear}'`
);

drawGoogleChart({
  type: 'LineChart',
  data: makeChartFriendly(dataForChart, 'månad', '°C'),
  options: {
    height: 500,
    width: 1250,
    chartArea: { left: 50 },
    curveType: 'function',
    pointSize: 5,
    pointShape: 'circle',
    vAxis: { format: '# °C' },
    title: `Medeltemperatur per månad i Malmö ${currentYear} (°C)`
  }
});

// the same db query as before, but with the long month names
let dataForTable = await dbQuery(
  `SELECT monthName, temperatureC FROM dataWithMonths WHERE year = '${currentYear}'`
);

tableFromData({
  data: dataForTable,
  columnNames: ['Månad', 'Medeltemperatur (°C)']
});

//COMPARE TWO YEARS

import addMdToPage from './libs/addMdToPage.js';
import addDropdown from './libs/addDropdown.js';
import dbQuery from "./libs/dbQuery.js";
import tableFromData from './libs/tableFromData.js';
import drawGoogleChart from './libs/drawGoogleChart.js';
import makeChartFriendly from './libs/makeChartFriendly.js';

let years = (await dbQuery(
  'SELECT DISTINCT year FROM dataWithMonths'
)).map(x => x.year);

let year1 = addDropdown('År 1', years, 1964);
let year2 = addDropdown('År 2', years, 2024)

addMdToPage(`
  ## Medeltemperaturer i Malmö, jämförelse mellan år ${year1} och år ${year2}
`);

// in order to get the two years to compare 
// we perform a join between two subselects
let dataForChart = await dbQuery(`
  SELECT monthName1 AS monthName, temp1, temp2 FROM 
    (SELECT monthNameShort AS monthName1, temperatureC AS temp1 FROM dataWithMonths WHERE year = '${year1}') AS t1,
    (SELECT monthNameShort AS monthName2, temperatureC AS temp2 FROM dataWithMonths WHERE year = '${year2}') AS t2
  WHERE t1.monthName1 = t2.monthName2  
`);

drawGoogleChart({
  type: 'LineChart',
  data: makeChartFriendly(dataForChart, 'månad', `°C ${year1}`, `°C ${year2}`),
  options: {
    height: 500,
    width: 1250,
    chartArea: { left: 50 },
    curveType: 'function',
    pointSize: 5,
    pointShape: 'circle',
    vAxis: { format: '# °C' },
    title: `Medeltemperatur per månad i Malmö, jämförelse mellan år ${year1} och ${year2} (°C)`
  }
});

// the same db query as before, but with the long month names
let dataForTable = await dbQuery(`
  SELECT monthName1 AS monthName, temp1, temp2 FROM 
    (SELECT monthName AS monthName1, temperatureC AS temp1 FROM dataWithMonths WHERE year = '${year1}') AS t1,
    (SELECT monthName AS monthName2, temperatureC AS temp2 FROM dataWithMonths WHERE year = '${year2}') AS t2
  WHERE t1.monthName1 = t2.monthName2  
`);

tableFromData({
  data: dataForTable,
  columnNames: ['Månad', `Medeltemperatur (°C) ${year1}`, `Medeltemperatur (°C) ${year2}`]
});


// JOIN/GROUP BY JAVASCRIPT EQUIVALENT


Den här koden kan du klistra in direkt i main.js i version 2 av vår mall.

Den visar hur vi kan genomföra:

    En “join” av månadskod från två olika år
    En “group by” av olika år för att räkna ut ett genomsnittsvärde per år.

Notera: I framtida övningar/uppgifter när vi har en databas inkopplad kan du istället välja att göra denna typ av databearbetning/aggregering via SQL-frågor!

import makeChartFriendly from './libs/makeChartFriendly.js';
import drawGoogleChart from './libs/drawGoogleChart.js';
import * as s from './libs/simple-statistics.js';

let data = [
  { date: "2020-01", priceOfCoffeeSEKKg: 160 },
  { date: "2020-02", priceOfCoffeeSEKKg: 165 },
  { date: "2020-03", priceOfCoffeeSEKKg: 166 },
  { date: "2021-01", priceOfCoffeeSEKKg: 170 },
  { date: "2021-02", priceOfCoffeeSEKKg: 172 },
  { date: "2021-03", priceOfCoffeeSEKKg: 173 },
  { date: "2024-01", priceOfCoffeeSEKKg: 185 },
  { date: "2024-02", priceOfCoffeeSEKKg: 187 },
  { date: "2024-03", priceOfCoffeeSEKKg: 190 }
];

// filter data so that we have 2020 and 2024 seperately
let data2020 = data.filter(x => x.date >= "2020-01" && x.date <= "2020-12");
let data2024 = data.filter(x => x.date >= "2024-01" && x.date <= "2024-12");

console.log(data2020);
console.log(data2024);

let months = ['januari', 'februari', 'mars'];

// joining data from 2020 and 2024 into new objects in an new array
let data2020and2024 = data2020.map((x, index) => ({
  month: months[index],/*x.date.slice(5)*/
  priceOfCoffeeSEKKg2020: x.priceOfCoffeeSEKKg,
  priceOfCoffeeSEKKg2024: data2024[index].priceOfCoffeeSEKKg
}));

console.log(data2020and2024);

// draw a line chart with two lines
// comparing prices 2020 and 2024
drawGoogleChart({
  type: 'LineChart',
  data: makeChartFriendly(
    data2020and2024,
    "Månad", "Kaffepris/kg 2020", "Kaffepris/kg 2024"
  ),
  options: {
    title: 'Coffeeprices',
    height: 500,
    vAxis: { minValue: 0 },
    curve: "function"
  }
});

let yearsWithDuplicates = data.map(x => x.date.slice(0, 4));
// remove duplicates with the set constructor
let years = [...new Set(yearsWithDuplicates)];
// get a list of all prices during a year for each year
// and calculate a mean (average) for each year
let meanPricesPerYear = years.map(
  year => data.filter(x => x.date.includes(year))
).map(x => ({
  year: x[0].date.slice(0, 4),
  meanPrice: s.mean(x.map(x => x.priceOfCoffeeSEKKg))
}));

// Draw a line chart with mean prices per year
drawGoogleChart({
  type: 'LineChart',
  data: makeChartFriendly(
    meanPricesPerYear,
    "År", "Medelpris"
  ),
  options: {
    title: 'Coffeeprices',
    height: 500,
    vAxis: { minValue: 0 },
    curve: "function"
  }
});

// Add dropdown

let gender = addDropdown('Variabel', ['samtliga', 'kvinnor', 'män']);

if (gender == 'samtliga') {
  addMdToPage(`Här hade vi kunnat visa data om samtliga respondenter i en undersökning.`);
}
else if (gender == 'kvinnor') {
  addMdToPage(`Här hade vi kunnat visa data om endast kvinnor.`);
}
else {
  addMdToPage(`Här hade vi kunnat visa data om endast män.`)
};

import * as s from './libs/simple-statistics.js';
import jload from './libs/jload.js';
import addToPage from './libs/addToPage.js';

// Load the data
let data = await jload('salaries.json');

// Create some variables with filtered and mapped data
let women = data.filter(x => x.gender == 'female');
let men = data.filter(x => x.gender == 'male');
let ages = data.map(x => x.age);
let agesWomen = women.map(x => x.age);
let agesMen = men.map(x => x.age);
let salaries = data.map(x => x.monthlySalarySEK);
let salariesWomen = women.map(x => x.monthlySalarySEK);
let salariesMen = men.map(x => x.monthlySalarySEK);
let ageGroup18_32 = data.filter(x => x.age >= 18 && x.age <= 32);
let ageGroup33_50 = data.filter(x => x.age >= 33 && x.age <= 50);
let ageGroup51_64 = data.filter(x => x.age >= 51 && x.age <= 64);
let salariesAgeGroup18_32 = ageGroup18_32.map(x => x.monthlySalarySEK);
let salariesAgeGroup33_50 = ageGroup33_50.map(x => x.monthlySalarySEK);
let salariesAgeGroup51_64 = ageGroup51_64.map(x => x.monthlySalarySEK);
let salariesAgeGroupWomen18_32 = ageGroup18_32
  .filter(x => x.gender == 'female').map(x => x.monthlySalarySEK);
let salariesAgeGroupWomen33_50 = ageGroup33_50
  .filter(x => x.gender == 'female').map(x => x.monthlySalarySEK);
let salariesAgeGroupWomen51_64 = ageGroup51_64
  .filter(x => x.gender == 'female').map(x => x.monthlySalarySEK);
let salariesAgeGroupMen18_32 = ageGroup18_32
  .filter(x => x.gender == 'male').map(x => x.monthlySalarySEK);
let salariesAgeGroupMen33_50 = ageGroup33_50
  .filter(x => x.gender == 'male').map(x => x.monthlySalarySEK);
let salariesAgeGroupMen51_64 = ageGroup51_64
  .filter(x => x.gender == 'male').map(x => x.monthlySalarySEK);
let regionMo = data.filter(x => x.region == 'Malmö');
let regionGbg = data.filter(x => x.region == 'Göteborg');
let regionSthm = data.filter(x => x.region == 'Stockholm');
let salariesRegionMo = regionMo.map(x => x.monthlySalarySEK);
let salariesRegionGbg = regionGbg.map(x => x.monthlySalarySEK);
let salariesRegionSthm = regionSthm.map(x => x.monthlySalarySEK);
let salariesWomenRegionMo = regionMo
  .filter(x => x.gender == 'female').map(x => x.monthlySalarySEK);
let salariesWomenRegionGbg = regionGbg
  .filter(x => x.gender == 'female').map(x => x.monthlySalarySEK);
let salariesWomenRegionSthm = regionSthm
  .filter(x => x.gender == 'female').map(x => x.monthlySalarySEK);
let salariesMenRegionMo = regionMo
  .filter(x => x.gender == 'male').map(x => x.monthlySalarySEK);
let salariesMenRegionGbg = regionGbg
  .filter(x => x.gender == 'male').map(x => x.monthlySalarySEK);
let salariesMenRegionSthm = regionSthm
  .filter(x => x.gender == 'male').map(x => x.monthlySalarySEK);

// Perform and output statistic calculations
addToPage(`<pre>
  <b>Notera</b>: Samtliga löner är bruttomånadslöner i SEK, 
  samt <b>sd</b> används som förkortning för standardavvikelse.

  <b>Regioner</b>
  Den region de flesta bor i:         ${s.modeFast(data.map(x => x.region))}
  Antal från Malmö-regionen:          ${regionMo.length} 
  Antal från Göteborgs-regionen:      ${regionGbg.length} 
  Antal från Stockholms-regionen:     ${regionSthm.length} 

  <b>Ålder</b>
  Den yngsta individen:               ${s.min(ages)}
  Den äldsta individen:               ${s.max(ages)}

  Den yngsta kvinnan:                 ${s.min(agesWomen)}
  Den äldsta kvinnan:                 ${s.max(agesWomen)}

  Den yngsta mannen:                  ${s.min(agesMen)}
  Den äldsta mannen:                  ${s.max(agesMen)}

  Medianålder för samtliga:           ${s.median(ages)}
  Medelålder för samtliga:            ${s.mean(ages).toFixed(1)} (sd: ${s.sampleStandardDeviation(ages).toFixed(1)})

  Medianålder för kvinnor:            ${s.median(agesWomen)}
  Medelålder för kvinnor:             ${s.mean(agesWomen).toFixed(1)} (sd: ${s.sampleStandardDeviation(agesWomen).toFixed(1)})

  Medianålder för män:                ${s.median(agesMen)}
  Medelålder för män:                 ${s.mean(agesMen).toFixed(1)} (sd: ${s.sampleStandardDeviation(agesMen).toFixed(1)})

  <b>Löner och kön</b>
  Medianlön för samtliga:             ${s.median(salaries).toFixed(0)} 
  Medellön för samtliga:              ${s.mean(salaries).toFixed(0)} (sd: ${s.sampleStandardDeviation(salaries).toFixed(0)})

  Medianlön för kvinnor:              ${s.median(salariesWomen).toFixed(0)} 
  Medellön för kvinnor:               ${s.mean(salariesWomen).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesWomen).toFixed(0)})

  Medianlön för män:                  ${s.median(salariesMen).toFixed(0)} 
  Medellön för män:                   ${s.mean(salariesMen).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesMen).toFixed(0)})

  <b>Åldersgruppsindelning</b>
  Antal respondenter 18-32 år:        ${ageGroup18_32.length}
  Antal respondenter 33-50 år:        ${ageGroup33_50.length}
  Antal respondenter 51-64 år:        ${ageGroup51_64.length}

  <b>Löner och ålder, samtliga</b>
  Medianlön för samtliga 18-32 år:    ${s.median(salariesAgeGroup18_32).toFixed(0)}
  Medellön för samtliga  18-32 år:    ${s.mean(salariesAgeGroup18_32).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesAgeGroup18_32).toFixed(0)})

  Medianlön för samtliga 33-50 år:    ${s.median(salariesAgeGroup33_50).toFixed(0)}
  Medellön för samtliga  33-50 år:    ${s.mean(salariesAgeGroup33_50).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesAgeGroup33_50).toFixed(0)})

  Medianlön för samtliga 51-64 år:    ${s.median(salariesAgeGroup51_64).toFixed(0)}
  Medellön för samtliga  51-64 år:    ${s.mean(salariesAgeGroup51_64).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesAgeGroup51_64).toFixed(0)})

  <b>Löner och ålder, kvinnor</b>
  Medianlön för kvinnor 18-32 år:     ${s.median(salariesAgeGroupWomen18_32).toFixed(0)}
  Medellön för kvinnor 18-32 år:      ${s.mean(salariesAgeGroupWomen18_32).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesAgeGroupWomen18_32).toFixed(0)})

  Medianlön för kvinnor 33-50 år:     ${s.median(salariesAgeGroupWomen33_50).toFixed(0)}
  Medellön för kvinnor 33-50 år:      ${s.mean(salariesAgeGroupWomen33_50).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesAgeGroupWomen33_50).toFixed(0)})

  Medianlön för kvinnor 51-64 år:     ${s.median(salariesAgeGroupWomen51_64).toFixed(0)}
  Medellön för kvinnor 51-64 år:      ${s.mean(salariesAgeGroupWomen51_64).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesAgeGroupWomen51_64).toFixed(0)})

  <b>Löner och ålder, män</b>
  Medianlön för män 18-32 år:         ${s.median(salariesAgeGroupMen18_32).toFixed(0)}
  Medellön för män 18-32 år:          ${s.mean(salariesAgeGroupMen18_32).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesAgeGroupMen18_32).toFixed(0)})

  Medianlön för män 33-50 år:         ${s.median(salariesAgeGroupMen33_50).toFixed(0)}
  Medellön för män 33-50 år:          ${s.mean(salariesAgeGroupMen33_50).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesAgeGroupMen33_50).toFixed(0)})

  Medianlön för män 51-64 år:         ${s.median(salariesAgeGroupMen51_64).toFixed(0)}
  Medellön för män 51-64 år:          ${s.mean(salariesAgeGroupMen51_64).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesAgeGroupMen51_64).toFixed(0)})

  <b>Löner och regioner, samtliga</b>
  Medianlön för samtliga, Malmö:      ${s.median(salariesRegionMo).toFixed(0)}
  Medellön för samtliga, Malmö:       ${s.mean(salariesRegionMo).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesRegionMo).toFixed(0)})

  Medianlön för samtliga, Göteborg:   ${s.median(salariesRegionGbg).toFixed(0)}
  Medellön för samtliga, Göteborg:    ${s.mean(salariesRegionGbg).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesRegionGbg).toFixed(0)})

  Medianlön för samtliga, Stockholm:  ${s.median(salariesRegionSthm).toFixed(0)}
  Medellön för samtliga, Stockholm:   ${s.mean(salariesRegionSthm).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesRegionSthm).toFixed(0)})

  <b>Löner och regioner, kvinnor</b>
  Medianlön för kvinnor, Malmö:       ${s.median(salariesWomenRegionMo).toFixed(0)}
  Medellön för kvinnor, Malmö:        ${s.mean(salariesWomenRegionMo).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesWomenRegionMo).toFixed(0)})

  Medianlön för kvinnor, Göteborg:    ${s.median(salariesWomenRegionGbg).toFixed(0)}
  Medellön för kvinnor, Göteborg:     ${s.mean(salariesWomenRegionGbg).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesWomenRegionGbg).toFixed(0)})

  Medianlön för kvinnor, Stockholm:   ${s.median(salariesWomenRegionSthm).toFixed(0)}
  Medellön för kvinnor, Stockholm:    ${s.mean(salariesWomenRegionSthm).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesWomenRegionSthm).toFixed(0)})

  <b>Löner och regioner, män</b>
  Medianlön för män, Malmö:           ${s.median(salariesMenRegionMo).toFixed(0)}
  Medellön för män, Malmö:            ${s.mean(salariesMenRegionMo).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesMenRegionMo).toFixed(0)})

  Medianlön för män, Göteborg:        ${s.median(salariesMenRegionGbg).toFixed(0)}
  Medellön för män, Göteborg:         ${s.mean(salariesMenRegionGbg).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesMenRegionGbg).toFixed(0)})

  Medianlön för män, Stockholm:       ${s.median(salariesMenRegionSthm).toFixed(0)}
  Medellön för män, Stockholm:        ${s.mean(salariesMenRegionSthm).toFixed(0)} (sd: ${s.sampleStandardDeviation(salariesMenRegionSthm).toFixed(0)})

  <b>Slutsatser</b>
  Vi kan konstatera att kön har betydelse för lönenivån, 
  med en skillnad i medellön på 4 261 SEK och 
  i medianlön på 4 943 SEK, till männens fördel.

  Vi delade in respondenterna i 3 åldersgrupper
  (18-32 år, 322 st, 33-50 år, 386 st, 51-64 år, 292 st)
  och kan konstatera att lönerna ökar med ålder,
  med nästa dubbelt så höga medellön i gruppen 51-64 år (73 913 SEK),
  jämfört med gruppen 18-32 år (37 983 SEK).

  Även lönespridningen ökar markant med ålder (från 12 993 SEK i 
  standardavvikelse i den yngsta gruppen till 27 019 SEK i den äldsta).

  Vad gäller korrelationen lön och ålder ser vi en liknande utveckling 
  oavsett kön, om vi tittar på endast kvinnor, respektive endast män,
  inom olika åldersgrupper kvarstår faktum att medellönerna är nästan
  dubbelt så höga i gruppen 51-64 år, jämfört med gruppen 18-32 år.

  Vad gäller de olika regionerna (Malmö-, Göteborg- och Stockholmsregionen)
  inverkan på lönerna är skillnaderna mellan Malmö och Göteborg relativt små,
  med bara aningen högre löner i Göteborg.

  Det är däremot en tydlig skillnad mellan Stockholm och övriga regioner.
  Medellönen för Stockholmsregionen är 4 870 SEK högre än för Malmöregionen.
  Standardavvikelserna är likartade (vilket innebär att extremvärden inte
  verkar snedvrida jämförelsen).

  Sammanfattningsvis kan sägas att ålder verkar ha störst betydelse för lön,
  och att kön och vilken storstadsregion verkar ha ungefär lika stor betydelse.

  Det vore därmed ganska troligt att två jämngamla IT-utvecklare, en manlig
  verksam i Malmö och en kvinnlig verksam i Stockholm har liknande lön.

  Den IT-utvecklare som tjänar sämst är en ung kvinna i Malmö-regionen 
  och den som tjänar bäst är en äldre man i Stockholms-regionen...

</pre>`)

--ovning loner ---

import * as s from './libs/simple-statistics.js';
import jload from './libs/jload.js';
import addToPage from './libs/addToPage.js';

// Load the data from json
let data = await jload('salaries.json');

//Women and men as separate variables

let women = data.filter(x => x.gender == "female")
let men = data.filter(x => x.gender == "male")

addToPage(`<pre>

  yngsta individ: ${s.min(data.map(x => x.age))}
  äldsta individ: ${s.max(data.map(x => x.age))}

  vanligaste region: ${s.mode(data.map(x => x.region))}
  antal individer stockholm: ${data.filter(x => x.region == 'Stockholm').length}
  antal individer göteborg: ${data.filter(x => x.region == 'Göteborg').length}
  antal individer malmö: ${data.filter(x => x.region == 'Malmö').length}

  antal kvinnor: ${women.length}
  antal män: ${men.length}

  antal kvinnor i stockholm: ${data.filter(x => x.gender == "female" && x.region == "Stockholm").length}
  antal kvinnor i stockholm eller malmö: ${data.filter(x => x.gender == "female" && x.region == "Stockholm" || x.region == "Malmö").length}

  yngsta kvinna: ${s.min(data.filter(x => x.gender == "female").map(x => x.age))}
  äldsta kvinna: ${s.max(data.filter(x => x.gender == "female").map(x => x.age))}

  yngsta man: ${s.max(data.filter(x => x.gender == "male").map(x => x.age))}
  äldsta man: ${s.max(data.filter(x => x.gender == "male").map(x => x.age))}

  medianålder samtliga: ${s.medianSorted(data.map(x => x.age))}
  medelålder samtliga: ${s.mean(data.map(x => x.age)).toFixed(2)}
  standardavvikelse ålder: ${s.sampleStandardDeviation(data.map(x => x.age)).toFixed(2)}
  
  medianålder kvinnor: ${s.medianSorted(data.filter(x => x.gender == "female").map(x => x.age))}
  medelålder kvinnor: ${s.mean(data.filter(x => x.gender == "female").map(x => x.age)).toFixed(2)}
  standardavvikelse kvinnor: ${s.sampleStandardDeviation(data.filter(x => x.gender == "female").map(x => x.age)).toFixed(2)}

  medianålder män: ${s.medianSorted(data.filter(x => x.gender == "male").map(x => x.age))}
  medelålder män: ${s.mean(data.filter(x => x.gender == "male").map(x => x.age)).toFixed(2)}
  standardavvikelse ålder män: ${s.sampleStandardDeviation(data.filter(x => x.gender == "male").map(x => x.age)).toFixed(2)}

  medianlönen för samtliga: ${s.medianSorted(data.map(x => x.monthlySalarySEK))}
  snittlönen för samtliga: ${s.mean(data.map(x => x.monthlySalarySEK)).toFixed(2)}
  standardavvikelse lön samtliga: ${s.sampleStandardDeviation(data.map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön kvinnor: ${s.medianSorted(data.filter(x => x.gender == "female").map(x => x.monthlySalarySEK))} 
  snittlön kvinnor: ${s.mean(data.filter(x => x.gender == "female").map(x => x.monthlySalarySEK)).toFixed(2)}
  standardavvikelse lön kvinnor: ${s.sampleStandardDeviation(data.filter(x => x.gender == "female").map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön män: ${s.median(data.filter(x => x.gender == "male").map(x => x.monthlySalarySEK)).toFixed(2)}
  snittlön män: ${s.mean(data.filter(x => x.gender == "male").map(x => x.monthlySalarySEK)).toFixed(2)}
  standardavvikelse lön män: ${s.sampleStandardDeviation(data.filter(x => x.gender == "male").map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön (18-32): ${s.medianSorted(data.filter(x => x.age >= 18 && x.age <= 32).map(x => x.monthlySalarySEK))} 
  snittlön (18-32): ${s.mean(data.filter(x => x.age >= 18 && x.age <= 32).map(x => x.monthlySalarySEK)).toFixed(2)} 
  standardavvikelse (18-32): ${s.sampleStandardDeviation(data.filter(x => x.age >= 18 && x.age <= 32).map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön (33-50): ${s.medianSorted(data.filter(({ age }) => age >= 33 && age <= 50).map(({ monthlySalarySEK }) => monthlySalarySEK))} --

  medianlön (33-50): ${s.medianSorted(data.filter(x => x.age >= 33 && x.age <= 50).map(x => x.monthlySalarySEK))} 
  snittlön (33-50): ${s.mean(data.filter(x => x.age >= 33 && x.age <= 50).map(x => x.monthlySalarySEK)).toFixed(2)} 
  standardavvikelse (33-50): ${s.sampleStandardDeviation(data.filter(x => x.age >= 33 && x.age <= 50).map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön (51-64): ${s.medianSorted(data.filter(x => x.age >= 51 && x.age <= 64).map(x => x.monthlySalarySEK))} 
  snittlön (51-64): ${s.mean(data.filter(x => x.age >= 51 && x.age <= 64).map(x => x.monthlySalarySEK)).toFixed(2)} 
  standardavvikelse (51-64): ${s.sampleStandardDeviation(data.filter(x => x.age >= 51 && x.age <= 64).map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön män (18-32): ${s.medianSorted(data.filter(x => x.age >= 18 && x.age <= 32 && x.gender == "male").map(x => x.monthlySalarySEK))} 
  snittlön män (18-32): ${s.mean(data.filter(x => x.age >= 18 && x.age <= 32 && x.gender == "male").map(x => x.monthlySalarySEK)).toFixed(2)} 
  standardavvikelse män (18-32): ${s.sampleStandardDeviation(data.filter(x => x.age >= 18 && x.age <= 32 && x.gender == "male").map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön män (33-50): ${s.medianSorted(data.filter(x => x.age >= 33 && x.age <= 50 && x.gender == "male").map(x => x.monthlySalarySEK))} 
  snittlön män (33-50): ${s.mean(data.filter(x => x.age >= 33 && x.age <= 50 && x.gender == "male").map(x => x.monthlySalarySEK)).toFixed(2)} 
  standardavvikelse män (33-50): ${s.sampleStandardDeviation(data.filter(x => x.age >= 33 && x.age <= 50 && x.gender == "male").map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön män (51-64): ${s.medianSorted(data.filter(x => x.age >= 51 && x.age <= 64 && x.gender == "male").map(x => x.monthlySalarySEK))} 
  snittlön män (51-64): ${s.mean(data.filter(x => x.age >= 51 && x.age <= 64 && x.gender == "male").map(x => x.monthlySalarySEK)).toFixed(2)} 
  standardavvikelse män (51-64): ${s.sampleStandardDeviation(data.filter(x => x.age >= 51 && x.age <= 64 && x.gender == "male").map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön kvinnor (18-32): ${s.medianSorted(data.filter(x => x.age >= 18 && x.age <= 32 && x.gender == "female").map(x => x.monthlySalarySEK))} 
  snittlön kvinnor (18-32): ${s.mean(data.filter(x => x.age >= 18 && x.age <= 32 && x.gender == "female").map(x => x.monthlySalarySEK)).toFixed(2)} 
  standardavvikelse kvinnor (18-32): ${s.sampleStandardDeviation(data.filter(x => x.age >= 18 && x.age <= 32 && x.gender == "female").map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön kvinnor (33-50): ${s.medianSorted(data.filter(x => x.age >= 33 && x.age <= 50 && x.gender == "female").map(x => x.monthlySalarySEK))} 
  snittlön kvinnor (33-50): ${Math.round(s.mean(data.filter(x => x.age >= 33 && x.age <= 50 && x.gender == "female").map(x => x.monthlySalarySEK)))} 
  standardavvikelse kvinnor (33-50): ${s.sampleStandardDeviation(data.filter(x => x.age >= 33 && x.age <= 50 && x.gender == "female").map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön kvinnor (51-64): ${s.medianSorted(data.filter(x => x.age >= 51 && x.age <= 64 && x.gender == "female").map(x => x.monthlySalarySEK))} 
  snittlön kvinnor (51-64): ${Math.round(s.mean(data.filter(x => x.age >= 51 && x.age <= 64 && x.gender == "female").map(x => x.monthlySalarySEK)))} 
  standardavvikelse kvinnor (51-64): ${s.sampleStandardDeviation(data.filter(x => x.age >= 51 && x.age <= 64 && x.gender == "female").map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön stockholm: ${s.medianSorted(data.filter(x => x.region == "Stockholm").map(x => x.monthlySalarySEK))} 
  snittlön stockholm: ${Math.round(s.mean(data.filter(x => x.region == "Stockholm").map(x => x.monthlySalarySEK)))}
  standardavvikelse lön stockholm: ${s.sampleStandardDeviation(data.filter(x => x.region == "Stockholm").map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön göteborg: ${s.medianSorted(data.filter(x => x.region == "Göteborg").map(x => x.monthlySalarySEK))} 
  snittlön göteborg: ${Math.round(s.mean(data.filter(x => x.region == "Göteborg").map(x => x.monthlySalarySEK)))}
  standardavvikelse lön göteborg: ${s.sampleStandardDeviation(data.filter(x => x.region == "Göteborg").map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön malmö: ${s.medianSorted(data.filter(x => x.region == "Malmö").map(x => x.monthlySalarySEK))} 
  snittlön malmö: ${Math.round(s.mean(data.filter(x => x.region == "Malmö").map(x => x.monthlySalarySEK)))}
  standardavvikelse lön malmö: ${s.sampleStandardDeviation(data.filter(x => x.region == "Malmö").map(x => x.monthlySalarySEK)).toFixed(2)} 

  medianlön män stockholm: ${s.medianSorted(data.filter(x => x.region == "Stockholm" && x.gender == "male").map(x => x.monthlySalarySEK))} 
  snittlön män stockholm: ${Math.round(s.mean(data.filter(x => x.region == "Stockholm" && x.gender == "male").map(x => x.monthlySalarySEK)))}
  standardavvikelse lön män stockholm: ${s.sampleStandardDeviation(data.filter(x => x.region == "Stockholm" && x.gender == "male").map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön män göteborg: ${s.medianSorted(data.filter(x => x.region == "Göteborg" && x.gender == "male").map(x => x.monthlySalarySEK))} 
  snittlön män göteborg: ${Math.round(s.mean(data.filter(x => x.region == "Göteborg" && x.gender == "male").map(x => x.monthlySalarySEK)))}
  standardavvikelse lön män göteborg: ${s.sampleStandardDeviation(data.filter(x => x.region == "Göteborg" && x.gender == "male").map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön män malmö: ${s.medianSorted(data.filter(x => x.region == "Malmö" && x.gender == "male").map(x => x.monthlySalarySEK))} 
  snittlön män malmö: ${Math.round(s.mean(data.filter(x => x.region == "Malmö" && x.gender == "male").map(x => x.monthlySalarySEK)))}
  standardavvikelse lön män malmö: ${s.sampleStandardDeviation(data.filter(x => x.region == "Malmö" && x.gender == "male").map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön kvinnor stockholm: ${s.medianSorted(data.filter(x => x.region == "Stockholm" && x.gender == "female").map(x => x.monthlySalarySEK))} 
  snittlön kvinnor stockholm: ${Math.round(s.mean(data.filter(x => x.region == "Stockholm" && x.gender == "female").map(x => x.monthlySalarySEK)))}
  standardavvikelse lönkvinnor stockholm: ${s.sampleStandardDeviation(data.filter(x => x.region == "Stockholm" && x.gender == "female").map(x => x.monthlySalarySEK)).toFixed(2)}

  medianlön kvinnor göteborg: ${s.medianSorted(data.filter(x => x.region == "Göteborg" && x.gender == "female").map(x => x.monthlySalarySEK))} 
  snittlön kvinnor göteborg: ${Math.round(s.mean(data.filter(x => x.region == "Göteborg" && x.gender == "female").map(x => x.monthlySalarySEK)))}
  standardavvikelse lön kvinnor göteborg: ${s.sampleStandardDeviation(data.filter(x => x.region == "Göteborg" && x.gender == "female").map(x => x.monthlySalarySEK)).toFixed(2)}

  median lön kvinnor malmö: ${s.medianSorted(data.filter(x => x.region == "Malmö" && x.gender == "female").map(x => x.monthlySalarySEK))} 
  snittlön kvinnor malmö: ${Math.round(s.mean(data.filter(x => x.region == "Malmö" && x.gender == "female").map(x => x.monthlySalarySEK)))}
  standardavvikelse vmän malmö: ${s.sampleStandardDeviation(data.filter(x => x.region == "Malmö" && x.gender == "female").map(x => x.monthlySalarySEK)).toFixed(2)}
</pre>`);


/*

-- studender--
 
let studentSurvey  = await dbQuery('SELECT * FROM studentSurvey');
tableFromData({ data: studentSurvey });

import * as s from './libs/simple-statistics.js';
import makeChartFriendly from './libs/makeChartFriendly.js'; './libs/makeChartFriendly.js';
import csvLoad from './libs/csvLoad.js';
import tableFromData from './libs/tableFromData.js';
import drawGoogleChart from './libs/drawGoogleChart.js';
import addToPage from './libs/addToPage.js';


let data = await csvLoad('smhiData.csv', ';'); /* Lägg in separatorn */

// Filter: smhiData from the year 1964
let smhiData1964 = data.filter(x => x.date >= '1964-01' && x.date <= '1964-12');

// Filter: smhiData from the year 2024
let smhiData2024 = data.filter(x => x.date >= '2024-01' && x.date <= '2024-12');



// Display a headline
addToPage('<h2>Nederbörd och Temperatur i Malmö <br>månad för månad 1964</h2>');

// Display a table with the data from the smhiData variable
tableFromData({ data: smhiData1964, columnNames: ['Datum', 'Nederbörd (mm)', 'Temperatur (°C)'] });

// Map: Keep date and temperatureC properties/columns (and not the rainFall column)
let temperatures1964 = smhiData1964.map(({ date, temperatureC }) => ({ date, temperatureC }));

// Map: Keep date and temperatureC properties/columns (and not the rainFall column)
let temperatures2024 = smhiData2024.map(({ date, temperatureC }) => ({ date, temperatureC }));

let monthName = ["januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december"];

let combinedData1964_2024 = temperatures1964.map((x, i) => ({  // mappar objektet samt index
  month: monthName[+x.date.slice(5) - 1], // x representerar objektstrukturen, + gör om str till float, slice tar bort tecken och -1 ser till att arrayen startar på 0
  temperature1964: x.temperatureC,
  temperature2024: temperatures2024[i].temperatureC // index
}));

drawGoogleChart({
  type: 'LineChart',
  data: makeChartFriendly(combinedData1964_2024, 'Månad', 'Temperaturer 1964 (°C)', 'Temperaturer 2024 (°C) '),
  options: {
    title: 'Temperatur (°C)',
    height: 500,
    curveType: 'function',
    chartArea: { left: 80 },
    hAxis: {
      slantedText: true
    }
  }
});



/*
  {
    month: "01",
    temparature1964: 2,
    temperature2024: 3
  }

*/

--ovning smhi--

// Map: Keep date and temperatureC properties/columns (and not the rainFall column)
//let rainFallMm1964 = smhiData1964.map(({ date, rainFallMm }) => ({ date, rainFallMm }));

// Draw a line chart of temperatures



/* Ladda hem data i CSV - format för temperatur och nederbörd i Malmö mellan år 1961 - 2024 från SMHI
 Redigera CSV - filen så att det finns en rad högst upp med kolumnrubriker - och sätt lämpliga engelska kolumnrubriker - gärna camelcasade och utan mellanslag eller konstiga tecken.
 Notera även: SMHI använder “;” (semikolon) som avskiljare så gör det när du redigerar också.
 Skapa ett nytt projekt med version 2 av vår mall.Ta med CSV - filen och läs in den i main.js
 Visa temperaturer för Malmö under 1964:s års månader i ett linjediagram. --
 Visa även en tabell med motsvarande värden som de som finns i diagrammet! --
 Visa nederbörd för Malmö under 1964:s års månader i ett linje diagram. --
 Visa även en tabell med motsvarande värden som de som finns i diagrammet! --


 Lite svårare: Visa temperaturer för månader under å 1964, respektive månader under år 2024 i ett linjediagram, som två separata linjer / kurvor. --

 Räkna ut medeltemperaturer för hela året för varje år mellan år 1964 och 2024 med hjälp av array - metoden map och Simple Statistics.
 Visa upp dessa årsmedeltemperatur i en tabell.
 Visa upp dessa årsmedeltemperatur i ett linjediagram.
 Skapa en kopia av main.js så att du har kvar ditt arbete, innan du i steg 11 ändrar i main.js!
 Ändra i main.js så att diagrammen istället för att visas som linjediagram, visas som stapeldiagram! Passar detta bättre eller sämre för att visualisera datan ?
 
/ kombinerad (1964 & 2024)
let combinedTemperatureData = temperatures1964.map((item, index) => ({
  Månad: getMonthName(item.date),
  'Temp 1964': item.temperatureC,
  'Temp 2024': temperatures2024[index] ? temperatures2024[index].temperatureC : null
})) 

// Draw a line chart of temperatures
drawGoogleChart({
  type: 'LineChart',
  data: makeChartFriendly(combinedData1964_2024, 'Månad', 'Temperaturer 1964 (°C)', 'Temperaturer 2024 (°C) '),
  options: {
    title: 'Temperatur (°C)',
    height: 500,
    curveType: 'function',
    chartArea: { left: 80 },
    hAxis: {
      slantedText: true
    }
  }
});
 
 */

__ ovning csv load ---

import makeChartFriendly from './libs/makeChartFriendly.js'; './libs/makeChartFriendly.js';
import csvLoad from './libs/csvLoad.js';
import tableFromData from './libs/tableFromData.js';
import drawGoogleChart from './libs/drawGoogleChart.js';
import addToPage from './libs/addToPage.js';

let data = await csvLoad('smhi-rainfall-temperature-sthm.csv', ';'); /* Lägg in separatorn */

// Filter: Data from the year 2024
let data2024 = data.filter(x => x.date >= '2024-01' && x.date <= '2024-12');

// Display a headline
addToPage('<h2>Nederbörd och temperaturer i Stockholm,<br>månad för månad 2024</h2>');

// Display a table with the data from the data2024 variable
tableFromData({ data: data2024, columnNames: ['Datum', 'Nederbörd (mm)', 'Temperatur (°C)'] });

// Map: Keep date and temperatureC properties/columns (and not the rainFall column)
let temperatures2024 = data2024.map(({ date, temperatureC }) => ({ date, temperatureC }));

// Draw a line chart of temperatures2024
drawGoogleChart({
  type: 'LineChart',
  data: makeChartFriendly(temperatures2024, 'Månad', 'Temperatur (°C)'),
  options: {
    title: 'Medeltemperaturer i Stockholm 2024, månad för månad',
    height: 500,
    curveType: 'function',
    chartArea: { left: 80 },
    hAxis: {
      slantedText: true,
      slantedAngle: 45
    }
  }
});

// Can you make a chart that shows rainfall during 2024 here?